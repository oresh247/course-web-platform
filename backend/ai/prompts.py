"""
Шаблоны промптов для генерации и перегенерации контента
Переиспользуется из TGBotCreateCourse проекта
"""

# ============================================================================
# ПРОМПТ ДЛЯ ГЕНЕРАЦИИ СТРУКТУРЫ КУРСА
# ============================================================================

COURSE_GENERATION_SYSTEM_PROMPT = """Ты — эксперт по созданию структур образовательных IT-курсов.
Создаёшь детальные учебные программы с модулями и уроками.
Отвечаешь строго в JSON формате без дополнительных комментариев."""

COURSE_GENERATION_PROMPT_TEMPLATE = """Создай структуру IT-курса по следующим параметрам:

ТЕМА: {topic}
АУДИТОРИЯ: {audience}
КОЛИЧЕСТВО МОДУЛЕЙ: {num_modules}
ДЛИТЕЛЬНОСТЬ: {duration}

ТРЕБОВАНИЯ:
- Каждый модуль должен иметь четкую цель
- В каждом модуле 3-7 уроков
- Уроки должны иметь разные форматы: theory, practice, lab, quiz, project
- Указывай время в минутах для каждого урока

ФОРМАТ ОТВЕТА: строго JSON
{{
  "course_title": "название курса",
  "target_audience": "{audience}",
  "modules": [
    {{
      "module_number": 1,
      "module_title": "название модуля",
      "module_goal": "детальная цель модуля (2-3 предложения)",
      "lessons": [
        {{
          "lesson_title": "название урока",
          "lesson_goal": "цель урока (1-2 предложения)",
          "estimated_time_minutes": 60,
          "format": "theory",
          "assessment": "способ оценки",
          "content_outline": ["пункт 1", "пункт 2", "пункт 3"]
        }}
      ]
    }}
  ]
}}

ВАЖНО: Верни ТОЛЬКО JSON, без комментариев и markdown блоков!"""


# ============================================================================
# ПРОМПТ ДЛЯ ГЕНЕРАЦИИ КОНТЕНТА МОДУЛЯ (ЛЕКЦИИ И СЛАЙДЫ)
# ============================================================================

MODULE_CONTENT_SYSTEM_PROMPT = """Ты — эксперт по созданию детального образовательного контента для IT-курсов.
Создаёшь ПОЛНОЦЕННЫЕ учебные ЛЕКЦИИ со СЛАЙДАМИ в формате презентаций.

ВАЖНО О КОНТЕНТЕ СЛАЙДОВ:
- Каждый слайд должен содержать ПОЛНЫЙ учебный материал для студента
- Контент должен быть детальным, с объяснениями, примерами, определениями
- НЕ пиши краткие тезисы! Пиши полноценный учебный текст!

ВАЖНО О СТРУКТУРЕ:
- Ты ВСЕГДА возвращаешь JSON с полем "lectures" (массив лекций)
- Каждая лекция содержит поле "slides" (массив слайдов)
- НИКОГДА не возвращай структуру урока с полями lesson_title, lesson_goal, content_outline
- Отвечаешь строго в указанном JSON формате без отклонений."""

MODULE_CONTENT_PROMPT_TEMPLATE = """Создай ДЕТАЛЬНЫЙ учебный контент для модуля IT-курса в формате ЛЕКЦИЙ СО СЛАЙДАМИ.

КОНТЕКСТ КУРСА:
- Курс: {course_title}
- Аудитория: {target_audience}
- Модуль №{module_number}: {module_title}
- Цель модуля: {module_goal}

ТЕМЫ ДЛЯ ЛЕКЦИЙ (создай по одной лекции на каждую тему):
{lessons_list}

ЗАДАЧА: 
Создай {num_lessons} ЛЕКЦИЙ (lectures) в формате презентаций.
Каждая ЛЕКЦИЯ должна содержать массив СЛАЙДОВ (slides).
Одна лекция = 8-12 слайдов презентации.

ТИПЫ СЛАЙДОВ:
- title: Заглавный слайд (1 на лекцию)
- content: Теоретический материал (3-5 пунктов на слайд)
- code: Примеры кода с подробными комментариями
- diagram: Схемы и диаграммы (текстовое описание визуализации)
- quiz: Вопросы для проверки понимания
- summary: Итоги и ключевые выводы (1 на лекцию)

ТРЕБОВАНИЯ К СЛАЙДАМ:
- В поле "content" помещай ПОЛНЫЙ учебный материал, который будет показан студенту
- Контент должен быть детальным и понятным (2-3 абзаца или 5-8 пунктов)
- Для code слайдов обязательно добавляй полноценные примеры кода с комментариями в code_example
- В поле "notes" добавляй КРАТКИЕ методические указания для преподавателя (как подать материал, на что обратить внимание)
- Нумеруй слайды последовательно с 1
- ВАЖНО: content - это основной учебный материал для студента, а не краткие тезисы!

ТРЕБОВАНИЯ К ЛЕКЦИЯМ:
- learning_objectives - 3-5 конкретных целей обучения
- key_takeaways - 3-5 ключевых выводов, которые студент должен запомнить
- duration_minutes - реалистичная оценка времени

ФОРМАТ ОТВЕТА: строго JSON со следующей структурой

ОБЯЗАТЕЛЬНАЯ СТРУКТУРА JSON:
{{
  "module_number": {module_number},
  "module_title": "{module_title}",
  "lectures": [
    {{
      "lecture_title": "название лекции (например: 'Введение в переменные и типы данных')",
      "module_number": {module_number},
      "module_title": "{module_title}",
      "duration_minutes": 45,
      "learning_objectives": [
        "конкретная цель 1",
        "конкретная цель 2",
        "конкретная цель 3"
      ],
      "key_takeaways": [
        "ключевой вывод 1",
        "ключевой вывод 2",
        "ключевой вывод 3"
      ],
      "slides": [
        {{
          "slide_number": 1,
          "title": "Введение в Python",
          "content": "Python - это высокоуровневый язык программирования общего назначения.\\n\\nОсновные характеристики:\\n- Простой и понятный синтаксис\\n- Интерпретируемый язык\\n- Динамическая типизация\\n- Богатая стандартная библиотека\\n- Большое сообщество разработчиков\\n\\nPython используется в веб-разработке, data science, машинном обучении, автоматизации и многих других областях.",
          "slide_type": "content",
          "code_example": null,
          "notes": "Подчеркните универсальность Python"
        }},
        {{
          "slide_number": 2,
          "title": "Первая программа на Python",
          "content": "Традиционная первая программа 'Hello, World!' демонстрирует базовый синтаксис Python.\\n\\nФункция print() используется для вывода текста на экран.\\nСтроки в Python можно писать в одинарных или двойных кавычках.\\n\\nПосле запуска программы в консоли появится текст 'Hello, World!'",
          "slide_type": "code",
          "code_example": "# Первая программа на Python\\nprint('Hello, World!')\\n\\n# Можно использовать двойные кавычки\\nprint(\\"Привет, мир!\\")\\n\\n# Вывод нескольких строк\\nprint('Первая строка')\\nprint('Вторая строка')",
          "notes": "Запустите код вживую, покажите результат"
        }}
      ]
    }}
  ]
}}

КРИТИЧЕСКИ ВАЖНО:
1. Корневой объект ОБЯЗАТЕЛЬНО должен содержать поле "lectures" (массив лекций)
2. Каждая лекция в "lectures" ОБЯЗАТЕЛЬНО должна содержать поле "slides" (массив слайдов)
3. НЕ возвращай структуру УРОКА (lesson с полями lesson_title, lesson_goal, content_outline)
4. Возвращай структуру ЛЕКЦИЙ (lectures с вложенными slides)
5. Создай {num_lessons} лекций, каждая с 8-12 слайдами
6. Верни ТОЛЬКО JSON, без комментариев и markdown блоков!

ВАЖНО ПРО CONTENT И NOTES:
- "content" - это ВЕСЬ учебный материал для студента (детальные объяснения, определения, примеры)
- "notes" - это КОРОТКИЕ методические указания для преподавателя (1-2 предложения)
- НЕ пиши в "content" краткие тезисы! Пиши полноценный учебный текст!
- НЕ пиши весь учебный материал в "notes"! Notes - только для преподавателя!"""


# ============================================================================
# ПРОМПТ ДЛЯ ПЕРЕГЕНЕРАЦИИ УРОКА (LESSON)
# ============================================================================

LESSON_REGENERATION_SYSTEM_PROMPT = """Ты — эксперт по созданию образовательных программ для IT-курсов.
Улучшаешь и дорабатываешь уроки с учётом требований.
Отвечаешь строго в JSON формате."""

LESSON_REGENERATION_PROMPT_TEMPLATE = """Перегенерируй урок для IT-курса с улучшениями.

КОНТЕКСТ КУРСА:
Курс: {course_title}
Аудитория: {target_audience}
Модуль: {module_title}
Цель модуля: {module_goal}

ТЕКУЩИЙ УРОК:
Название: {lesson_title}
Формат: {lesson_format}
Длительность: {lesson_duration} мин

Текущая цель урока:
{lesson_goal}

Текущий план контента:
{content_outline}
{custom_requirements}
ЗАДАЧА: 
Создай улучшенную версию этого урока. Сохрани тему и основные идеи, но улучши структуру, детализацию и практичность.

ТРЕБОВАНИЯ К ОБНОВЛЕННОМУ УРОКУ:
- Цель урока должна быть конкретной и измеримой
- План контента должен быть детальным (5-7 пунктов)
- Формат урока должен соответствовать содержанию
- Оценка должна быть практической и проверяемой
- Учитывай уровень аудитории ({target_audience})

ФОРМАТ ОТВЕТА: строго JSON
{{
  "lesson_title": "{lesson_title}",
  "lesson_goal": "детальная цель урока (2-3 предложения, что именно студент узнает и сможет сделать)",
  "estimated_time_minutes": {lesson_duration},
  "format": "{lesson_format}",
  "assessment": "конкретный способ оценки знаний (тест/практическое задание/проект/код-ревью)",
  "content_outline": [
    "детальный пункт 1",
    "детальный пункт 2",
    "детальный пункт 3",
    "детальный пункт 4",
    "детальный пункт 5"
  ]
}}

ВАЖНО: 
- Верни ТОЛЬКО JSON, без комментариев и markdown блоков!
- Все поля обязательны
- content_outline должен быть массивом строк (не один длинный текст)"""


# ============================================================================
# ПРОМПТ ДЛЯ ГЕНЕРАЦИИ ДЕТАЛЬНОГО УЧЕБНОГО МАТЕРИАЛА ПО ТЕМЕ
# ============================================================================

TOPIC_MATERIAL_SYSTEM_PROMPT = """Ты — эксперт по созданию детальных учебных материалов для IT-курсов.
Создаешь подробные, практико-ориентированные материалы для изучения конкретных тем.
Материалы должны быть понятными, структурированными и содержать много примеров.
Отвечаешь строго в JSON формате."""

TOPIC_MATERIAL_PROMPT_TEMPLATE = """Создай ДЕТАЛЬНЫЙ учебный материал для изучения конкретной темы из IT-курса.

КОНТЕКСТ КУРСА:
- Курс: {course_title}
- Аудитория: {target_audience}
- Модуль: {module_title}
- Урок: {lesson_title}
- Цель урока: {lesson_goal}

ТЕМА ДЛЯ ДЕТАЛИЗАЦИИ:
Тема №{topic_number}: {topic_title}

ЗАДАЧА:
Создай полноценный учебный материал, который студент может изучать самостоятельно.
Материал должен быть практичным, содержать примеры и упражнения.

ТРЕБОВАНИЯ К МАТЕРИАЛУ:

1. ВВЕДЕНИЕ (introduction):
   - 2-3 абзаца
   - Зачем это нужно
   - Где применяется
   - Что студент узнает

2. ТЕОРИЯ (theory):
   - Подробное объяснение концепции
   - 4-6 абзацев
   - Простым языком
   - С аналогиями и метафорами

3. ПРАКТИЧЕСКИЕ ПРИМЕРЫ (examples):
   - 3-5 конкретных примеров
   - От простого к сложному
   - С объяснением каждого примера

4. ПРИМЕРЫ КОДА (code_snippets) - если применимо:
   - 2-4 примера кода
   - С комментариями
   - Работающий код

5. КЛЮЧЕВЫЕ МОМЕНТЫ (key_points):
   - 5-7 важных пунктов
   - Что обязательно нужно запомнить

6. ЧАСТЫЕ ОШИБКИ (common_mistakes):
   - 3-5 типичных ошибок новичков
   - Как их избежать

7. ЛУЧШИЕ ПРАКТИКИ (best_practices):
   - 3-5 рекомендаций
   - Как делать правильно

8. УПРАЖНЕНИЯ (practice_exercises):
   - 3-5 заданий для практики
   - Разного уровня сложности
   - Конкретные и проверяемые

9. ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ (quiz_questions):
   - 5-7 вопросов
   - Проверка понимания материала

ФОРМАТ ОТВЕТА: строго JSON

{{
  "topic_title": "{topic_title}",
  "topic_number": {topic_number},
  "introduction": "Многострочное введение в тему (2-3 абзаца)...",
  "theory": "Подробное теоретическое объяснение (4-6 абзацев)...",
  "examples": [
    "Пример 1: Детальное описание...",
    "Пример 2: Другой случай...",
    "Пример 3: Более сложный пример..."
  ],
  "code_snippets": [
    "# Пример 1\\ncode here...",
    "# Пример 2\\nmore code..."
  ],
  "key_points": [
    "Ключевой момент 1",
    "Ключевой момент 2",
    ...
  ],
  "common_mistakes": [
    "Ошибка 1 и как ее избежать",
    "Ошибка 2 и почему это проблема",
    ...
  ],
  "best_practices": [
    "Практика 1: описание",
    "Практика 2: рекомендация",
    ...
  ],
  "practice_exercises": [
    "Задание 1: создайте...",
    "Задание 2: реализуйте...",
    ...
  ],
  "quiz_questions": [
    "Вопрос 1: Что такое...?",
    "Вопрос 2: Как работает...?",
    ...
  ],
  "additional_resources": [
    "Ссылка на документацию...",
    "Рекомендуемая статья..."
  ],
  "estimated_reading_time_minutes": 25
}}

ВАЖНО:
- Все тексты должны быть содержательными и развернутыми
- Примеры должны быть конкретными и практичными
- Код должен быть рабочим и с комментариями
- Учитывай уровень аудитории: {target_audience}
- Верни ТОЛЬКО JSON, без комментариев и markdown блоков!"""


# ============================================================================
# ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ ФОРМАТИРОВАНИЯ
# ============================================================================

def format_lessons_list(lessons):
    """Форматирует список уроков для промпта"""
    result = ""
    for i, lesson in enumerate(lessons, 1):
        lesson_title = getattr(lesson, 'lesson_title', 'Урок без названия')
        lesson_format = getattr(lesson, 'format', 'theory')
        lesson_time = getattr(lesson, 'estimated_time_minutes', 60)
        lesson_goal = getattr(lesson, 'lesson_goal', '')
        
        result += f"{i}. {lesson_title} ({lesson_format}, {lesson_time} мин)\n"
        result += f"   Цель: {lesson_goal}\n"
    return result


def format_content_outline(content_outline):
    """Форматирует план контента для промпта"""
    if not content_outline:
        return "(план контента отсутствует)"
    result = ""
    for item in content_outline:
        result += f"• {item}\n"
    return result


def format_custom_requirements(custom_requirements):
    """Форматирует дополнительные требования для промпта"""
    if not custom_requirements:
        return ""
    return f"\nДОПОЛНИТЕЛЬНЫЕ ТРЕБОВАНИЯ ОТ ПОЛЬЗОВАТЕЛЯ:\n{custom_requirements}\n"


"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ TGBotCreateCourse –ø—Ä–æ–µ–∫—Ç–∞
"""
import logging
import json
from typing import Optional, Dict, Any, List

from backend.models.domain import (
    Module, Lecture, Slide, ModuleContent, 
    Lesson, LessonContent, TopicMaterial
)
from backend.ai.openai_client import OpenAIClient
from backend.ai.prompts import (
    MODULE_CONTENT_SYSTEM_PROMPT,
    MODULE_CONTENT_PROMPT_TEMPLATE,
    TOPIC_MATERIAL_SYSTEM_PROMPT,
    TOPIC_MATERIAL_PROMPT_TEMPLATE,
    format_lessons_list
)

logger = logging.getLogger(__name__)


class ContentGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self):
        self.openai_client = OpenAIClient()
    
    def generate_lesson_detailed_content(
        self,
        lesson,
        module: Module,
        course_title: str,
        target_audience: str
    ) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞ (—Å–ª–∞–π–¥—ã)
        
        Args:
            lesson: –£—Ä–æ–∫ (Lesson object)
            module: –ú–æ–¥—É–ª—å
            course_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            target_audience: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —É—Ä–æ–∫–∞ –∏–ª–∏ None
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É—Ä–æ–∫–∞: {lesson.lesson_title}")
        
        try:
            prompt = f"""–°–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–£–Æ –ª–µ–∫—Ü–∏—é —Å–æ —Å–ª–∞–π–¥–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞ IT-–∫—É—Ä—Å–∞.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö—É—Ä—Å: {course_title}
- –ê—É–¥–∏—Ç–æ—Ä–∏—è: {target_audience}
- –ú–æ–¥—É–ª—å: {module.module_title}
- –£—Ä–æ–∫: {lesson.lesson_title}
- –¶–µ–ª—å —É—Ä–æ–∫–∞: {lesson.lesson_goal}
- –§–æ—Ä–º–∞—Ç: {lesson.format}
- –í—Ä–µ–º—è: {lesson.estimated_time_minutes} –º–∏–Ω—É—Ç

–ü–õ–ê–ù –ö–û–ù–¢–ï–ù–¢–ê –£–†–û–ö–ê:
{chr(10).join('- ' + item for item in lesson.content_outline)}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –æ–¥–Ω—É –õ–ï–ö–¶–ò–Æ —Å 6-10 –°–õ–ê–ô–î–ê–ú–ò, –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–º–∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –ø–ª–∞–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ö–∞–∂–¥—ã–π —Å–ª–∞–π–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ü–û–õ–ù–´–ô —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (2-3 –∞–±–∑–∞—Ü–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π)
- –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –≤ code_example
- –î–æ–±–∞–≤—å learning_objectives (3-4 —Ü–µ–ª–∏) –∏ key_takeaways (3-4 –≤—ã–≤–æ–¥–∞)

–§–û–†–ú–ê–¢ JSON:
{{
  "lecture_title": "{lesson.lesson_title}",
  "duration_minutes": {lesson.estimated_time_minutes},
  "learning_objectives": ["—Ü–µ–ª—å 1", "—Ü–µ–ª—å 2", "—Ü–µ–ª—å 3"],
  "key_takeaways": ["–≤—ã–≤–æ–¥ 1", "–≤—ã–≤–æ–¥ 2", "–≤—ã–≤–æ–¥ 3"],
  "slides": [
    {{
      "slide_number": 1,
      "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
      "content": "–ü–û–õ–ù–´–ô –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏...",
      "slide_type": "content",
      "code_example": null,
      "notes": "–ö—Ä–∞—Ç–∫–∏–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è"
    }}
  ]
}}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON!"""
            
            response = self.openai_client.client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –í–´–í–û–î–ò –¢–û–õ–¨–ö–û JSON!"},
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.3,
                max_tokens=6000  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 3000 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
            )
            
            content = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω
            finish_reason = response.choices[0].finish_reason
            if finish_reason == "length":
                logger.warning(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç —É—Ä–æ–∫–∞ –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤!")
            
            logger.debug(f"–û—Ç–≤–µ—Ç —É—Ä–æ–∫–∞ (–¥–ª–∏–Ω–∞: {len(content)}, finish_reason: {finish_reason})")
            
            # –î–ª—è —É—Ä–æ–∫–∞ –ø–∞—Ä—Å–∏–º JSON –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º _extract_json –¥–ª—è –º–æ–¥—É–ª–µ–π)
            try:
                # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                content = content.replace('```json', '').replace('```', '').strip()
                
                # –ò—â–µ–º JSON –±–ª–æ–∫
                start_idx = content.find('{')
                end_idx = content.rfind('}') + 1
                
                if start_idx != -1 and end_idx > start_idx:
                    json_str = content[start_idx:end_idx]
                    lesson_content = json.loads(json_str)
                    
                    if 'slides' in lesson_content and isinstance(lesson_content['slides'], list):
                        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(lesson_content['slides'])} —Å–ª–∞–π–¥–æ–≤")
                        return lesson_content
                    else:
                        logger.warning(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞. –ö–ª—é—á–∏: {list(lesson_content.keys())}")
                        return None
                else:
                    logger.warning("‚ùå JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —É—Ä–æ–∫–∞")
                    return None
                    
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —É—Ä–æ–∫–∞: {e}")
                return None
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—Ä–æ–∫–∞: {e}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞: {e}")
            return None
    
    def generate_module_content(
        self, 
        module: Module, 
        course_title: str, 
        target_audience: str
    ) -> Optional[ModuleContent]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è –≤–∫–ª—é—á–∞—è –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã
        
        Args:
            module: –ú–æ–¥—É–ª—å –∫—É—Ä—Å–∞
            course_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            target_audience: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            
        Returns:
            ModuleContent —Å –ª–µ–∫—Ü–∏—è–º–∏ –∏ —Å–ª–∞–π–¥–∞–º–∏ –∏–ª–∏ None
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è: {module.module_title}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: JSON mode
        result = self._try_json_mode(module, course_title, target_audience)
        if result:
            return result
        
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        result = self._try_text_mode(module, course_title, target_audience)
        if result:
            return result
        
        # Fallback: –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        logger.warning("üìå –í—Å–µ –º–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        return self._get_test_module_content(module)
    
    def _try_json_mode(
        self, 
        module: Module, 
        course_title: str, 
        target_audience: str
    ) -> Optional[ModuleContent]:
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JSON mode"""
        try:
            logger.info("üîß –ü—Ä–æ–±—É–µ–º JSON mode...")
            
            prompt = MODULE_CONTENT_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_number=module.module_number,
                module_title=module.module_title,
                module_goal=module.module_goal,
                lessons_list=format_lessons_list(module.lessons),
                num_lessons=len(module.lessons)
            )
            
            response = self.openai_client.client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": MODULE_CONTENT_SYSTEM_PROMPT + "\n\n–í–´–í–û–î –¢–û–õ–¨–ö–û –í JSON –§–û–†–ú–ê–¢–ï!"},
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.3,
                max_tokens=8000  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 4000 –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            )
            
            content = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
            finish_reason = response.choices[0].finish_reason
            if finish_reason == "length":
                logger.warning(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤! –£–≤–µ–ª–∏—á—å—Ç–µ max_tokens.")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç –æ—Ç AI (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, finish_reason: {finish_reason})")
            logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {content}")
            
            json_content = self._extract_json(content)
            
            if json_content and "lectures" in json_content:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                for lecture in json_content["lectures"]:
                    lecture["module_number"] = module.module_number
                    lecture["module_title"] = module.module_title
                
                total_slides = sum(len(lecture.get("slides", [])) for lecture in json_content["lectures"])
                total_duration = sum(lecture.get("duration_minutes", 0) for lecture in json_content["lectures"])
                
                json_content["total_slides"] = total_slides
                json_content["estimated_duration_minutes"] = total_duration
                
                module_content = ModuleContent(**json_content)
                logger.info(f"‚úÖ JSON mode —É—Å–ø–µ—à–Ω–æ: {len(module_content.lectures)} –ª–µ–∫—Ü–∏–π, {total_slides} —Å–ª–∞–π–¥–æ–≤")
                return module_content
            else:
                logger.warning("‚ùå JSON mode –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return None
                
        except Exception as e:
            logger.warning(f"‚ùå JSON mode –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    def _try_text_mode(
        self, 
        module: Module, 
        course_title: str, 
        target_audience: str
    ) -> Optional[ModuleContent]:
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info("üîß –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
            
            prompt = MODULE_CONTENT_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_number=module.module_number,
                module_title=module.module_title,
                module_goal=module.module_goal,
                lessons_list=format_lessons_list(module.lessons),
                num_lessons=len(module.lessons)
            )
            
            response = self.openai_client.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": MODULE_CONTENT_SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=8000  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 4000 –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            )
            
            content = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
            finish_reason = response.choices[0].finish_reason
            if finish_reason == "length":
                logger.warning(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤! –£–≤–µ–ª–∏—á—å—Ç–µ max_tokens.")
            
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, finish_reason: {finish_reason})")
            
            json_content = self._extract_json(content)
            
            if json_content and "lectures" in json_content:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                for lecture in json_content["lectures"]:
                    lecture["module_number"] = module.module_number
                    lecture["module_title"] = module.module_title
                
                total_slides = sum(len(lecture.get("slides", [])) for lecture in json_content["lectures"])
                total_duration = sum(lecture.get("duration_minutes", 0) for lecture in json_content["lectures"])
                
                json_content["total_slides"] = total_slides
                json_content["estimated_duration_minutes"] = total_duration
                
                module_content = ModuleContent(**json_content)
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ: {len(module_content.lectures)} –ª–µ–∫—Ü–∏–π, {total_slides} —Å–ª–∞–π–¥–æ–≤")
                return module_content
            else:
                logger.warning("‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return None
                
        except Exception as e:
            logger.warning(f"‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    def _extract_json(self, content: str, expected_key: str = "lectures") -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
        
        Args:
            content: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
            expected_key: –û–∂–∏–¥–∞–µ–º—ã–π –∫–ª—é—á –≤ –∫–æ—Ä–Ω–µ JSON (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "lectures")
        """
        try:
            # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            content = content.replace('```json', '').replace('```', '').strip()
            
            # –ò—â–µ–º JSON –±–ª–æ–∫
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx == -1 or end_idx <= start_idx:
                logger.error("JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
            
            json_str = content[start_idx:end_idx]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–µ–∑–∞–Ω –ª–∏ JSON (–Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ max_tokens)
            is_truncated = not json_str.rstrip().endswith('}')
            if is_truncated:
                logger.warning("‚ö†Ô∏è JSON –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º (–Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ })")
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å JSON –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                json_str = self._attempt_close_json(json_str)
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            try:
                parsed = json.loads(json_str)
                if expected_key and expected_key in parsed:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å '{expected_key}'")
                    return parsed
                elif not expected_key:
                    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å –∫–ª—é—á–∞–º–∏: {list(parsed.keys())}")
                    return parsed
                else:
                    logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª—é—á '{expected_key}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(parsed.keys())}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º anyway - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ
                    return parsed
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                logger.info(f"üîß –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
                
                # –ü–æ–ø—ã—Ç–∫–∞ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
                fixed_json = self._fix_json_errors(json_str, e)
                
                try:
                    parsed = json.loads(fixed_json)
                    if expected_key and expected_key in parsed:
                        logger.info("‚úÖ JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!")
                        return parsed
                    elif not expected_key:
                        logger.info(f"‚úÖ JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω. –ö–ª—é—á–∏: {list(parsed.keys())}")
                        return parsed
                    else:
                        logger.warning(f"‚ö†Ô∏è JSON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{expected_key}'")
                        return parsed
                except json.JSONDecodeError as e2:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON: {e2}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —á–∞—Å—Ç—å JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    error_pos = e2.pos if hasattr(e2, 'pos') else e.pos
                    context_start = max(0, error_pos - 100)
                    context_end = min(len(json_str), error_pos + 100)
                    logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω–∞—è —á–∞—Å—Ç—å JSON (–ø–æ–∑–∏—Ü–∏—è {error_pos}): ...{json_str[context_start:context_end]}...")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π JSON –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    self._save_failed_json(json_str, fixed_json, e2)
                    
                    return None
                
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ JSON: {e}")
            return None
    
    def _save_failed_json(self, original_json: str, fixed_json: str, error: Exception):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π JSON –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            import os
            from datetime import datetime
            debug_dir = "debug_json"
            os.makedirs(debug_dir, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            debug_file = os.path.join(debug_dir, f"failed_json_{timestamp}.txt")
            with open(debug_file, 'w', encoding='utf-8') as f:
                f.write(f"ERROR: {error}\n")
                f.write(f"{'='*80}\n")
                f.write(f"ORIGINAL JSON:\n")
                f.write(f"{'='*80}\n")
                f.write(original_json)
                f.write(f"\n{'='*80}\n")
                f.write(f"FIXED JSON:\n")
                f.write(f"{'='*80}\n")
                f.write(fixed_json)
            
            logger.info(f"üíæ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {debug_file}")
        except Exception as save_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –≤ —Ñ–∞–π–ª: {save_error}")
    
    def _attempt_close_json(self, json_str: str) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
        
        –ï—Å–ª–∏ JSON –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ max_tokens, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,
        —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.
        """
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ/–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
            open_braces = json_str.count('{')
            close_braces = json_str.count('}')
            open_brackets = json_str.count('[')
            close_brackets = json_str.count(']')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∫–∞–≤—ã—á–∫–∞)
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—á–∏—Ç–∞–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            quote_count = json_str.count('"') - json_str.count('\\"')
            in_string = (quote_count % 2) == 1
            
            # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
            if in_string:
                json_str += '"'
                logger.info("üîß –ó–∞–∫—Ä—ã–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É")
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª - –∑–∞–ø—è—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
            json_str = json_str.rstrip()
            if json_str.endswith(','):
                json_str = json_str[:-1]
                logger.info("üîß –£–¥–∞–ª–∏–ª–∏ trailing –∑–∞–ø—è—Ç—É—é")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã
            if open_brackets > close_brackets:
                for _ in range(open_brackets - close_brackets):
                    json_str += ']'
                logger.info(f"üîß –ó–∞–∫—Ä—ã–ª–∏ {open_brackets - close_brackets} –º–∞—Å—Å–∏–≤–æ–≤")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            if open_braces > close_braces:
                for _ in range(open_braces - close_braces):
                    json_str += '}'
                logger.info(f"üîß –ó–∞–∫—Ä—ã–ª–∏ {open_braces - close_braces} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            return json_str
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å JSON: {e}")
            return json_str
    
    def _fix_json_errors(self, json_str: str, error: json.JSONDecodeError) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤ JSON –æ—Ç AI
        
        Args:
            json_str: –°—Ç—Ä–æ–∫–∞ JSON —Å –æ—à–∏–±–∫–∞–º–∏
            error: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        import re
        
        # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º trailing –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        json_str = re.sub(r',(\s*[}\]])', r'\1', json_str)
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
        json_str = json_str.replace(',,', ',')
        
        # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ (—á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ AI)
        # –ü–∞—Ç—Ç–µ—Ä–Ω: "text"\n    "text" -> "text",\n    "text"
        json_str = re.sub(r'"\s*\n\s*"', '",\n        "', json_str)
        
        # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ
        # –ü–∞—Ç—Ç–µ—Ä–Ω: }\n    { -> },\n    {
        json_str = re.sub(r'}\s*\n\s*{', '},\n        {', json_str)
        
        # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–ª—è–º–∏
        # –ü–∞—Ç—Ç–µ—Ä–Ω: }\n    "field" -> },\n    "field"
        json_str = re.sub(r'}\s*\n\s*"', '},\n        "', json_str)
        # –ü–∞—Ç—Ç–µ—Ä–Ω: ]\n    "field" -> ],\n    "field"
        json_str = re.sub(r']\s*\n\s*"', '],\n        "', json_str)
        
        # 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º–∞—Å—Å–∏–≤–∞
        # –ü–∞—Ç—Ç–µ—Ä–Ω: "text1"\n    "text2" –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–∞
        # –≠—Ç–æ —É–∂–µ –ø–æ–∫—Ä—ã—Ç–æ –≤ –ø—É–Ω–∫—Ç–µ 3
        
        # 7. –£–¥–∞–ª—è–µ–º BOM –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        json_str = json_str.replace('\ufeff', '')
        
        # 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        # –≠—Ç–æ —Å–ª–æ–∂–Ω–æ –∏ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        
        # 9. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
        if hasattr(error, 'pos') and error.pos:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –æ—à–∏–±–∫–∏
            pos = error.pos
            if pos > 0 and pos < len(json_str):
                before = json_str[max(0, pos-5):pos]
                after = json_str[pos:min(len(json_str), pos+5)]
                
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞ –∏ –ø—Ä–æ–±–µ–ª—ã, –∞ –ø–æ—Å–ª–µ - –∫–∞–≤—ã—á–∫–∞
                if before.rstrip().endswith('"') and after.lstrip().startswith('"'):
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é
                    json_str = json_str[:pos] + ',' + json_str[pos:]
                    logger.info(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {pos}")
        
        return json_str
    
    def _get_test_module_content(self, module: Module) -> ModuleContent:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        lectures = []
        
        for i, lesson in enumerate(module.lessons, 1):
            slides = [
                Slide(
                    slide_number=1,
                    title=f"{lesson.lesson_title}",
                    content=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–∫ –ø–æ {lesson.lesson_title}",
                    slide_type="title",
                    notes="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É"
                ),
                Slide(
                    slide_number=2,
                    title="–¶–µ–ª–∏ —É—Ä–æ–∫–∞",
                    content=f"‚Ä¢ {lesson.lesson_goal}\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                    slide_type="content",
                    notes="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–ª—è—Ö —É—Ä–æ–∫–∞"
                ),
                Slide(
                    slide_number=3,
                    title="–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å",
                    content="‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n‚Ä¢ –í–∞–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã",
                    slide_type="content",
                    notes="–û–±—ä—è—Å–Ω–∏—Ç–µ —Ç–µ–æ—Ä–∏—é —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"
                ),
                Slide(
                    slide_number=4,
                    title="–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞",
                    content="–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä",
                    slide_type="code",
                    code_example="# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞\nprint('Hello, World!')",
                    notes="–†–∞–∑–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"
                ),
                Slide(
                    slide_number=5,
                    title="–ò—Ç–æ–≥–∏",
                    content=f"‚Ä¢ –ò–∑—É—á–∏–ª–∏ {lesson.lesson_title}\n‚Ä¢ –†–∞–∑–æ–±—Ä–∞–ª–∏ –ø—Ä–∏–º–µ—Ä—ã\n‚Ä¢ –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ",
                    slide_type="summary",
                    notes="–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ —É—Ä–æ–∫–∞"
                )
            ]
            
            lecture = Lecture(
                lecture_title=lesson.lesson_title,
                module_number=module.module_number,
                module_title=module.module_title,
                duration_minutes=lesson.estimated_time_minutes,
                slides=slides,
                learning_objectives=[lesson.lesson_goal],
                key_takeaways=[f"–û—Å–Ω–æ–≤—ã {lesson.lesson_title}"]
            )
            
            lectures.append(lecture)
        
        return ModuleContent(
            module_number=module.module_number,
            module_title=module.module_title,
            lectures=lectures,
            total_slides=sum(len(lecture.slides) for lecture in lectures),
            estimated_duration_minutes=sum(lecture.duration_minutes for lecture in lectures)
        )
    
    def generate_topic_material(
        self,
        topic_number: int,
        topic_title: str,
        lesson: Lesson,
        module_number: int,
        course_title: str,
        module_title: str,
        target_audience: str
    ) -> Optional[TopicMaterial]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –æ–¥–Ω–æ–π —Ç–µ–º—ã"""
        try:
            prompt = TOPIC_MATERIAL_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_title=module_title,
                lesson_title=lesson.lesson_title,
                lesson_goal=lesson.lesson_goal,
                topic_number=topic_number,
                topic_title=topic_title
            )
            
            # –ü—Ä–æ–±—É–µ–º JSON mode
            try:
                response = self.openai_client.client.chat.completions.create(
                    model="gpt-4-turbo-preview",
                    messages=[
                        {"role": "system", "content": TOPIC_MATERIAL_SYSTEM_PROMPT},
                        {"role": "user", "content": prompt}
                    ],
                    response_format={"type": "json_object"},
                    temperature=0.7,
                    max_tokens=6000  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 4000 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–µ–º—ã
                )
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON mode –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã")
            except Exception as e:
                logger.warning(f"JSON mode –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
                response = self.openai_client.client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": TOPIC_MATERIAL_SYSTEM_PROMPT},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.7,
                    max_tokens=6000  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 4000 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–µ–º—ã
                )
            
            content = response.choices[0].message.content.strip()
            # –î–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–µ–º—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            json_content = self._extract_json(content, expected_key=None)
            
            if not json_content:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –¥–ª—è —Ç–µ–º—ã: {topic_title}")
                return None
            
            topic_material = TopicMaterial(**json_content)
            logger.info(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {len(topic_material.examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
            return topic_material
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ç–µ–º—ã '{topic_title}': {e}")
            return None


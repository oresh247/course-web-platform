from typing import Dict, Any
from backend.models.domain import Course, Module


def export_course_markdown(course: Course) -> str:
    md = f"# {course.course_title}\n\n"
    md += f"**–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:** {course.target_audience}\n\n"
    if course.duration_weeks:
        md += f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n\n"
    if course.duration_hours:
        md += f"**–í—Å–µ–≥–æ —á–∞—Å–æ–≤:** {course.duration_hours}\n\n"
    md += "---\n\n"
    for module in course.modules:
        md += f"## –ú–æ–¥—É–ª—å {module.module_number}: {module.module_title}\n\n"
        md += f"**–¶–µ–ª—å –º–æ–¥—É–ª—è:** {module.module_goal}\n\n"
        for i, lesson in enumerate(module.lessons, 1):
            md += f"### {i}. {lesson.lesson_title}\n\n"
            md += f"**–¶–µ–ª—å —É—Ä–æ–∫–∞:** {lesson.lesson_goal}\n\n"
            md += f"**–§–æ—Ä–º–∞—Ç:** {lesson.format} | **–í—Ä–µ–º—è:** {lesson.estimated_time_minutes} –º–∏–Ω\n\n"
            md += f"**–ü–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n"
            for item in lesson.content_outline:
                md += f"- {item}\n"
            md += f"\n**–û—Ü–µ–Ω–∫–∞:** {lesson.assessment}\n\n"
        md += "---\n\n"
    return md


def export_course_text(course: Course) -> str:
    txt = f"{course.course_title}\n"
    txt += "=" * len(course.course_title) + "\n\n"
    txt += f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {course.target_audience}\n"
    if course.duration_weeks:
        txt += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
    if course.duration_hours:
        txt += f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {course.duration_hours}\n"
    txt += "\n" + "-" * 80 + "\n\n"
    for module in course.modules:
        txt += f"\n–ú–û–î–£–õ–¨ {module.module_number}: {module.module_title}\n"
        txt += "-" * 40 + "\n"
        txt += f"–¶–µ–ª—å –º–æ–¥—É–ª—è: {module.module_goal}\n\n"
        for i, lesson in enumerate(module.lessons, 1):
            txt += f"  {i}. {lesson.lesson_title}\n"
            txt += f"     –¶–µ–ª—å: {lesson.lesson_goal}\n"
            txt += f"     –§–æ—Ä–º–∞—Ç: {lesson.format} | –í—Ä–µ–º—è: {lesson.estimated_time_minutes} –º–∏–Ω\n"
            txt += f"     –ü–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
            for item in lesson.content_outline:
                txt += f"       - {item}\n"
            txt += f"     –û—Ü–µ–Ω–∫–∞: {lesson.assessment}\n\n"
        txt += "\n"
    return txt


def export_module_markdown(course: Course, module: Module, content_data: dict) -> str:
    md = f"# {course.course_title}\n\n"
    md += f"## –ú–æ–¥—É–ª—å {module.module_number}: {module.module_title}\n\n"
    md += f"**–¶–µ–ª—å –º–æ–¥—É–ª—è:** {module.module_goal}\n\n"
    md += "---\n\n"
    lectures = content_data.get('lectures', [])
    for i, lecture in enumerate(lectures, 1):
        md += f"### –õ–µ–∫—Ü–∏—è {i}: {lecture.get('lecture_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        if lecture.get('learning_objectives'):
            md += "**–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è:**\n"
            for obj in lecture['learning_objectives']:
                md += f"- {obj}\n"
            md += "\n"
        if lecture.get('key_takeaways'):
            md += "**–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:**\n"
            for key in lecture['key_takeaways']:
                md += f"- {key}\n"
            md += "\n"
        slides = lecture.get('slides', [])
        for j, slide in enumerate(slides, 1):
            slide_title = slide.get('slide_title') or slide.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            slide_content = slide.get('slide_content') or slide.get('content', '')
            md += f"#### –°–ª–∞–π–¥ {j}: {slide_title}\n\n"
            if slide_content:
                md += f"{slide_content}\n\n"
            if slide.get('code_example'):
                md += f"```python\n{slide['code_example']}\n```\n\n"
            if slide.get('visual_description'):
                md += f"üìä **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:** {slide['visual_description']}\n\n"
            if slide.get('notes'):
                md += f"üìù _–ó–∞–º–µ—Ç–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {slide['notes']}_\n\n"
        md += "---\n\n"
    return md


def export_lesson_markdown(course: Course, module: Module, lesson, content_data: dict) -> str:
    md = f"# {course.course_title}\n\n"
    md += f"## –ú–æ–¥—É–ª—å {module.module_number}: {module.module_title}\n\n"
    md += f"### –£—Ä–æ–∫: {lesson.lesson_title}\n\n"
    md += f"**–¶–µ–ª—å —É—Ä–æ–∫–∞:** {lesson.lesson_goal}\n\n"
    md += f"**–§–æ—Ä–º–∞—Ç:** {lesson.format} | **–í—Ä–µ–º—è:** {lesson.estimated_time_minutes} –º–∏–Ω\n\n"
    md += "---\n\n"
    if content_data.get('learning_objectives'):
        md += "**–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è:**\n"
        for obj in content_data['learning_objectives']:
            md += f"- {obj}\n"
        md += "\n"
    slides = content_data.get('slides', [])
    for j, slide in enumerate(slides, 1):
        slide_title = slide.get('slide_title') or slide.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        slide_content = slide.get('slide_content') or slide.get('content', '')
        md += f"#### –°–ª–∞–π–¥ {j}: {slide_title}\n\n"
        if slide_content:
            md += f"{slide_content}\n\n"
        if slide.get('code_example'):
            md += f"```python\n{slide['code_example']}\n```\n\n"
        if slide.get('notes'):
            md += f"üìù _{slide['notes']}_\n\n"
    if content_data.get('key_takeaways'):
        md += "---\n\n**–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:**\n"
        for key in content_data['key_takeaways']:
            md += f"- {key}\n"
        md += "\n"
    return md



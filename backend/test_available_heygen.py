"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π HeyGen API
"""

import requests
import os
import json
from dotenv import load_dotenv

load_dotenv()

def test_available_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ HeyGen API"""
    
    api_key = os.getenv('HEYGEN_API_KEY')
    if not api_key:
        print("‚ùå HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
    os.environ['PYTHONHTTPSVERIFY'] = '0'
    
    headers = {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json'
    }
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π HeyGen API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ì–æ–ª–æ—Å–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç)
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤:")
    try:
        response = requests.get(
            'https://api.heygen.com/v1/voice.list',
            headers=headers,
            timeout=10,
            verify=False
        )
        
        if response.status_code == 200:
            data = response.json()
            voices = data.get('data', [])
            print(f"‚úÖ –ì–æ–ª–æ—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç! –ü–æ–ª—É—á–µ–Ω–æ: {len(voices)}")
            
            print("üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
            for i, voice in enumerate(voices[:3], 1):
                print(f"   {i}. {voice.get('voice_id', 'N/A')} - {voice.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ê–≤–∞—Ç–∞—Ä—ã (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤:")
    try:
        response = requests.get(
            'https://api.heygen.com/v1/avatar.list',
            headers=headers,
            timeout=10,
            verify=False
        )
        
        if response.status_code == 200:
            data = response.json()
            avatars = data.get('data', [])
            print(f"‚úÖ –ê–≤–∞—Ç–∞—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ü–æ–ª—É—á–µ–Ω–æ: {len(avatars)}")
            return True
        else:
            print(f"‚ùå –ê–≤–∞—Ç–∞—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {response.status_code}")
            try:
                error = response.json()
                print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {error.get('code', 'N/A')}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error.get('message', 'N/A')}")
            except:
                pass
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    
    return False

def test_video_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)"""
    
    api_key = os.getenv('HEYGEN_API_KEY')
    if not api_key:
        return False
    
    headers = {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json'
    }
    
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    payload = {
        "video_inputs": [
            {
                "character": {
                    "type": "avatar",
                    "avatar_id": "default",
                    "avatar_style": "normal"
                },
                "voice": {
                    "type": "text",
                    "input_text": "–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ",
                    "voice_id": "default",
                    "language": "ru"
                },
                "background": {
                    "type": "color",
                    "value": "#ffffff"
                }
            }
        ],
        "dimension": {
            "width": 1920,
            "height": 1080
        },
        "aspect_ratio": "16:9",
        "quality": "high"
    }
    
    try:
        response = requests.post(
            'https://api.heygen.com/v1/video.generate',
            headers=headers,
            json=payload,
            timeout=30,
            verify=False
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            video_id = data.get('video_id')
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ! ID: {video_id}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {response.status_code}")
            try:
                error = response.json()
                print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {error.get('code', 'N/A')}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error.get('message', 'N/A')}")
            except:
                pass
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("–¢–ï–°–¢ –î–û–°–¢–£–ü–ù–´–• –§–£–ù–ö–¶–ò–ô HEYGEN API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    voices_ok = test_available_functions()
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    video_ok = test_video_generation()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ì–æ–ª–æ—Å–∞: {'–†–∞–±–æ—Ç–∞—é—Ç' if voices_ok else '–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç'}")
    print(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {'–†–∞–±–æ—Ç–∞–µ—Ç' if video_ok else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if voices_ok:
        print("\nüéâ –•–û–†–û–®–ò–ï –ù–û–í–û–°–¢–ò:")
        print("‚úÖ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        print("‚úÖ –ì–æ–ª–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã!")
        print("‚úÖ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –≥–æ–ª–æ—Å–∞–º–∏!")
        
        print("\nüîß –ß–¢–û –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≤–∞—Ç–∞—Ä–∞–º")
        print("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")
        print("3. –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
        
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
        print("API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")

if __name__ == "__main__":
    main()

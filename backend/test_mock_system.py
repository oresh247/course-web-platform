"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–∫ HeyGen —Å–µ—Ä–≤–∏—Å–æ–º
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_mock_heygen():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –º–æ–∫ HeyGen —Å–µ—Ä–≤–∏—Å–æ–º"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∫ HeyGen —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 50)
    
    try:
        from services.mock_heygen_service import MockHeyGenService, AdaptiveHeyGenService
        
        print("‚úÖ –ú–æ–∫ —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç MockHeyGenService:")
        mock_service = MockHeyGenService()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        avatars = mock_service.get_available_avatars()
        print(f"‚úÖ –ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(avatars['data'])} —à—Ç.")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
        voices = mock_service.get_available_voices()
        print(f"‚úÖ –ì–æ–ª–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã: {len(voices['data'])} —à—Ç.")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        video_result = mock_service.create_lesson_video(
            lesson_title="–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫",
            lesson_content="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–∫-–≤–∏–¥–µ–æ."
        )
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_result['video_id']}")
        
        # –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç AdaptiveHeyGenService:")
        adaptive_service = AdaptiveHeyGenService()
        
        avatars_adaptive = adaptive_service.get_available_avatars()
        print(f"‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(avatars_adaptive['data'])} –∞–≤–∞—Ç–∞—Ä–æ–≤")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–æ–∫-—Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ HeyGen API")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–∫-—Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def test_video_generation_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç VideoGenerationService —Å –º–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–º"""
    
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç VideoGenerationService:")
    
    try:
        from services.video_generation_service import VideoGenerationService
        
        video_service = VideoGenerationService()
        print("‚úÖ VideoGenerationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        avatars = video_service.heygen_service.get_available_avatars()
        print(f"‚úÖ –ê–≤–∞—Ç–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {len(avatars['data'])} —à—Ç.")
        
        print("‚úÖ VideoGenerationService —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–∫-—Å–µ—Ä–≤–∏—Å–æ–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ VideoGenerationService: {e}")
        return False

def test_fastapi_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å FastAPI"""
    
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    
    try:
        from fastapi import FastAPI
        from routes.video_routes import router as video_router
        
        app = FastAPI(title="AI Course Builder - Mock Test")
        app.include_router(video_router)
        
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ —Ä–æ—É—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–æ")
        print("‚úÖ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: uvicorn main:app --reload")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–∫ HeyGen —Å–µ—Ä–≤–∏—Å–æ–º")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ú–æ–∫ —Å–µ—Ä–≤–∏—Å
    mock_ok = test_mock_heygen()
    
    if not mock_ok:
        print("‚ùå –ú–æ–∫ —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return
    
    # –¢–µ—Å—Ç 2: VideoGenerationService
    service_ok = test_video_generation_service()
    
    # –¢–µ—Å—Ç 3: FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    api_ok = test_fastapi_integration()
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ú–æ–∫ HeyGen —Å–µ—Ä–≤–∏—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if mock_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ VideoGenerationService: {'–†–∞–±–æ—Ç–∞–µ—Ç' if service_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'–†–∞–±–æ—Ç–∞–µ—Ç' if api_ok else '–û—à–∏–±–∫–∞'}")
    
    if mock_ok and service_ok and api_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üé¨ –í–∏–¥–µ–æ-—Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–æ–∫-—Ä–µ–∂–∏–º–µ")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn main:app --reload")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api/docs")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    main()

"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç HeyGen API —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import requests
import os
import sys
from pathlib import Path
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ùå python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
    sys.exit(1)

def test_api_key_format():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞"""
    
    api_key = os.getenv('HEYGEN_API_KEY')
    if not api_key:
        print("‚ùå HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üîë API –∫–ª—é—á: {api_key[:15]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    if not api_key.startswith('sk_'):
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'sk_' - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    if len(api_key) < 20:
        print("‚ö†Ô∏è API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    
    return True

def test_heygen_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints HeyGen"""
    
    api_key = os.getenv('HEYGEN_API_KEY')
    if not api_key:
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ SSL –ø—Ä–æ–±–ª–µ–º
    os.environ['PYTHONHTTPSVERIFY'] = '0'
    os.environ['CURL_CA_BUNDLE'] = ''
    os.environ['REQUESTS_CA_BUNDLE'] = ''
    
    headers = {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json'
    }
    
    endpoints = [
        {
            'name': 'Avatar List',
            'url': 'https://api.heygen.com/v1/avatar.list',
            'method': 'GET'
        },
        {
            'name': 'Voice List', 
            'url': 'https://api.heygen.com/v1/voice.list',
            'method': 'GET'
        },
        {
            'name': 'User Info',
            'url': 'https://api.heygen.com/v1/user.info',
            'method': 'GET'
        }
    ]
    
    print("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints HeyGen API...")
    
    for endpoint in endpoints:
        try:
            print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint['name']}")
            
            if endpoint['method'] == 'GET':
                response = requests.get(
                    endpoint['url'],
                    headers=headers,
                    timeout=10,
                    verify=False
                )
            else:
                response = requests.post(
                    endpoint['url'],
                    headers=headers,
                    timeout=10,
                    verify=False
                )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ {endpoint['name']} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                try:
                    data = response.json()
                    if 'data' in data:
                        print(f"   üìä –î–∞–Ω–Ω—ã—Ö: {len(data['data'])}")
                except:
                    pass
            elif response.status_code == 403:
                print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)")
                try:
                    error_data = response.json()
                    print(f"   üìÑ –û—à–∏–±–∫–∞: {error_data}")
                except:
                    print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            elif response.status_code == 401:
                print(f"   ‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (401) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return True

def test_alternative_api_key():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞"""
    
    print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º:")
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HeyGen Dashboard:")
    print("   - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://app.heygen.com/")
    print("   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí API Keys")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
    
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á:")
    print("   - –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á")
    print("   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")
    print("   - –û–±–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª–µ")
    
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å:")
    print("   - –ó–∞–π–¥–∏—Ç–µ –≤ Billing/Credits")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã")
    
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∫–ª—é—á–∞:")
    print("   - –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ avatar.list")
    print("   - –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ video.generate")
    
    print("\n5Ô∏è‚É£ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:")
    print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç HeyGen")
    print("   - –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HeyGen")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: https://docs.heygen.com/")

def test_without_heygen():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ HeyGen"""
    
    print("\nüéØ –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ HeyGen:")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from fastapi import FastAPI
        import uvicorn
        from pydantic import BaseModel
        
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = FastAPI(title="AI Course Builder - Test")
        
        @app.get("/")
        async def root():
            return {"message": "AI Course Builder —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ HeyGen!"}
        
        @app.get("/health")
        async def health():
            return {
                "status": "healthy",
                "heygen_available": False,
                "message": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ HeyGen –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: uvicorn main:app --reload")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ HeyGen API")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –§–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞:")
    key_ok = test_api_key_format()
    
    if not key_ok:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å HEYGEN_API_KEY")
        return
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–ª–∏—á–Ω—ã–µ endpoints
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints:")
    test_heygen_endpoints()
    
    # –¢–µ—Å—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    print("\n3Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é:")
    test_alternative_api_key()
    
    # –¢–µ—Å—Ç 4: –†–∞–±–æ—Ç–∞ –±–µ–∑ HeyGen
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:")
    test_without_heygen()
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—é–º–µ:")
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("‚úÖ SSL –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã")
    print("‚ùå HeyGen API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º)")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ HeyGen")
    
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á HeyGen")
    print("2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –≤–∏–¥–µ–æ-—Ñ—É–Ω–∫—Ü–∏–π")
    print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å")

if __name__ == "__main__":
    main()

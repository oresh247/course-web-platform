"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è HeyGen API –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏
"""

import os
import requests
from dotenv import load_dotenv

load_dotenv()

def test_with_proxy_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HeyGen API —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏"""
    
    api_key = os.getenv('HEYGEN_API_KEY')
    if not api_key:
        print("‚ùå HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
    os.environ['PYTHONHTTPSVERIFY'] = '0'
    os.environ['CURL_CA_BUNDLE'] = ''
    os.environ['REQUESTS_CA_BUNDLE'] = ''
    
    headers = {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json',
        'User-Agent': 'AI-Course-Builder/1.0'
    }
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    proxy_configs = [
        {
            'name': '–ë–µ–∑ –ø—Ä–æ–∫—Å–∏',
            'proxies': None
        },
        {
            'name': '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏',
            'proxies': {
                'http': os.getenv('HTTP_PROXY', ''),
                'https': os.getenv('HTTPS_PROXY', '')
            }
        },
        {
            'name': '–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
            'proxies': {
                'http': '',
                'https': ''
            }
        }
    ]
    
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏:")
    print("=" * 60)
    
    for config in proxy_configs:
        print(f"\nüß™ {config['name']}:")
        
        try:
            response = requests.get(
                'https://api.heygen.com/v1/avatar.list',
                headers=headers,
                proxies=config['proxies'],
                timeout=30,
                verify=False
            )
            
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ –£–°–ü–ï–•!")
                try:
                    data = response.json()
                    avatars_count = len(data.get('data', []))
                    print(f"   üìà –ê–≤–∞—Ç–∞—Ä–æ–≤: {avatars_count}")
                    return True
                except:
                    pass
            elif response.status_code == 403:
                print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                try:
                    error = response.json()
                    print(f"   üîç –ö–æ–¥: {error.get('code', 'N/A')}")
                    print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {error.get('message', 'N/A')}")
                except:
                    pass
            else:
                print(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except requests.exceptions.ProxyError as e:
            print(f"   üîå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {str(e)[:100]}...")
        except requests.exceptions.Timeout as e:
            print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç: {e}")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {str(e)[:100]}...")
    
    return False

def test_alternative_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints HeyGen"""
    
    api_key = os.getenv('HEYGEN_API_KEY')
    if not api_key:
        return False
    
    headers = {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json'
    }
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
    endpoints = [
        'https://api.heygen.com/v1/avatar.list',
        'https://api.heygen.com/v2/avatar.list',
        'https://api.heygen.com/avatar.list',
        'https://heygen-api.com/v1/avatar.list'
    ]
    
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints:")
    print("=" * 50)
    
    for endpoint in endpoints:
        print(f"\nüì° {endpoint}")
        
        try:
            response = requests.get(
                endpoint,
                headers=headers,
                timeout=15,
                verify=False
            )
            
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢!")
                return True
            elif response.status_code == 403:
                print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {str(e)[:80]}...")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ö–°–ò –î–õ–Ø HEYGEN API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    proxy_ok = test_with_proxy_settings()
    
    if proxy_ok:
        print("\nüéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏")
        return
    
    # –¢–µ—Å—Ç 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
    endpoints_ok = test_alternative_endpoints()
    
    if endpoints_ok:
        print("\nüéâ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint!")
        return
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ö–û–†–ü–û–†–ê–¢–ò–í–ù–û–ô –°–ï–¢–ò:")
    print("\n1Ô∏è‚É£ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ IT-–æ—Ç–¥–µ–ª—É:")
    print("   - –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ api.heygen.com")
    print("   - –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ whitelist –¥–æ–º–µ–Ω–æ–≤")
    
    print("\n2Ô∏è‚É£ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (hotspot)")
    print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –¥—Ä—É–≥–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞/—Å–µ—Ç–∏")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    
    print("\n3Ô∏è‚É£ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–∫-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("   - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–π —Å–µ—Ç–∏")
    print("   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CI/CD –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–µ")

if __name__ == "__main__":
    main()

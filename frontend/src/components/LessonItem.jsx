import { Space, Tag, Button, Dropdown } from 'antd'
import {
  BookOutlined,
  EditOutlined,
  ThunderboltOutlined,
  ClockCircleOutlined,
  DownloadOutlined,
  PlayCircleOutlined,
  ReloadOutlined,
  MoreOutlined
} from '@ant-design/icons'
import { useState, useEffect } from 'react'
import { App } from 'antd'
import LessonVideoGenerator from './LessonVideoGenerator'
import { getVideoApiUrl } from '../config/api'

const LessonItem = ({ 
  lesson, 
  index, 
  moduleNumber,
  courseId,
  onGenerateContent,
  onViewContent,
  onExportContent,
  onEdit,
  onDuplicate,
  onDelete,
  isGenerating
}) => {
  const { message } = App.useApp ? App.useApp() : { message: { loading: () => {}, destroy: () => {}, success: () => {}, error: () => {} } };
  const [videoInfo, setVideoInfo] = useState(null);
  const [loadingVideoInfo, setLoadingVideoInfo] = useState(false);
  const [openingVideo, setOpeningVideo] = useState(false);
  const [hasDetailContent, setHasDetailContent] = useState(false);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (courseId && moduleNumber !== undefined && index !== undefined) {
      loadVideoInfo();
    }
  }, [courseId, moduleNumber, index]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–∫–æ–Ω–∫–∏
  useEffect(() => {
    const checkDetail = async () => {
      try {
        if (!courseId || moduleNumber === undefined || index === undefined) return;
        const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
        const resp = await fetch(`${baseUrl}/api/courses/${courseId}/modules/${moduleNumber}/lessons/${index}/content`);
        setHasDetailContent(resp.ok);
      } catch (e) {
        setHasDetailContent(false);
      }
    };
    checkDetail();
  }, [courseId, moduleNumber, index]);
  
  const loadVideoInfo = async () => {
    if (!courseId || courseId === null || !moduleNumber || moduleNumber === null || index === undefined || index === null) {
      console.log('–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', { courseId, moduleNumber, index });
      return;
    }
    
    setLoadingVideoInfo(true);
    try {
      const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      const response = await fetch(
        `${baseUrl}/api/video/lesson/${courseId}/${moduleNumber}/${index}/info`
      );
      const data = await response.json();
      console.log('–û—Ç–≤–µ—Ç API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:', data);
      
      if (data.success && data.data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ null
        if (data.data && typeof data.data === 'object') {
          console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data.data);
          setVideoInfo(data.data);
        } else {
          console.log('–î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø—É—Å—Ç—ã–µ:', data.data);
          setVideoInfo(null);
        }
      } else {
        console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É—Ä–æ–∫–∞', courseId, moduleNumber, index, data);
        // –§–æ–ª–ª–±—ç–∫: –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å—Ç–∞—Ç—É—Å –∏–∑ localStorage,
        // –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∞–¥—ë—Ç LessonVideoGenerator –ø–æ–¥ –∫–ª—é—á–æ–º video_status_{courseId}_{moduleNumber}_{lessonIndex}
        try {
          const cacheKey = `video_status_${courseId}_${moduleNumber}_${index}`;
          const cached = localStorage.getItem(cacheKey);
          if (cached) {
            const parsed = JSON.parse(cached);
            if (parsed && parsed.video_id) {
              console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π video_id –∏–∑ localStorage:', parsed);
              setVideoInfo({
                video_id: parsed.video_id,
                video_status: parsed.status,
                video_download_url: parsed.download_url,
                video_generated_at: parsed.updated_at ? new Date(parsed.updated_at).toISOString() : undefined
              });
            } else {
              setVideoInfo(null);
            }
          } else {
            setVideoInfo(null);
          }
        } catch (e) {
          console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –∏–∑ localStorage:', e);
          setVideoInfo(null);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:', error);
      setVideoInfo(null);
    } finally {
      setLoadingVideoInfo(false);
    }
  };
  
  const handleDownloadVideo = async () => {
    console.log('handleDownloadVideo –≤—ã–∑–≤–∞–Ω–∞', videoInfo);
    // –ü–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ video_id
    const readyInfo = await checkAndRefreshVideoStatus();
    if (!readyInfo?.isReady) {
      alert(readyInfo?.message || '–í–∏–¥–µ–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    const downloadUrl = readyInfo.downloadUrl;
    if (!downloadUrl || downloadUrl.trim() === '') {
      console.warn('video_download_url –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç', videoInfo);
      alert('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    try {
      console.log('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ URL:', downloadUrl);

      try {
        new URL(downloadUrl);
      } catch (e) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:', downloadUrl);
        alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ');
        return;
      }

      const response = await fetch(downloadUrl, {
        method: 'GET',
        headers: {
          'Accept': 'video/mp4, video/*, */*'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${lesson.lesson_title || 'lesson'}.mp4`;
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();

      setTimeout(() => {
        window.URL.revokeObjectURL(url);
        try {
          document.body.removeChild(a);
        } catch (e) {
        }
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };
  
  const handleWatchVideo = async () => {
    console.log('handleWatchVideo –≤—ã–∑–≤–∞–Ω–∞', videoInfo);
    const readyInfo = await checkAndRefreshVideoStatus();
    if (!readyInfo?.isReady) {
      alert(readyInfo?.message || '–í–∏–¥–µ–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    const watchUrl = readyInfo.downloadUrl;
    if (!watchUrl || watchUrl.trim() === '') {
      console.warn('video_download_url –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', videoInfo);
      alert('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    try {
      try {
        new URL(watchUrl);
      } catch (e) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:', watchUrl);
        alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ');
        return;
      }

      console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ –ø–æ URL:', watchUrl);
      const newWindow = window.open(watchUrl, '_blank');
      if (!newWindow) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ:', error);
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };
  
  const handleRegenerateVideo = () => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å —Ñ–ª–∞–≥–æ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ LessonVideoGenerator —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å
  };
  const exportMenuItems = [
    {
      key: 'video',
      label: 'üé¨ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (MP4)',
      onClick: () => handleDownloadVideo()
    },
    {
      type: 'divider'
    },
    {
      key: 'pptx',
      label: 'üìä PowerPoint',
      onClick: () => onExportContent('pptx')
    },
    {
      key: 'html',
      label: 'üìÑ HTML',
      onClick: () => onExportContent('html')
    },
    {
      key: 'markdown',
      label: 'üìù Markdown',
      onClick: () => onExportContent('markdown')
    }
  ]

  // –•–µ–ª–ø–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ video_id
  const checkAndRefreshVideoStatus = async () => {
    const videoId = videoInfo?.video_id;
    if (!videoId || String(videoId).trim() === '') {
      return { isReady: false, message: '–í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };
    }

    try {
      const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      const resp = await fetch(`${baseUrl}/api/video/status/${videoId}`);
      const json = await resp.json();
      const statusData = json?.data || {};

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π videoInfo –∏—Å—Ö–æ–¥—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
      const updated = {
        ...videoInfo,
        video_id: videoId,
        video_status: statusData.status || videoInfo?.video_status,
        video_download_url: statusData.download_url || videoInfo?.video_download_url,
      };
      setVideoInfo(updated);

      const isReady = updated.video_status === 'completed' && updated.video_download_url && updated.video_download_url.trim() !== '';
      return {
        isReady,
        downloadUrl: updated.video_download_url,
        message: isReady ? undefined : `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: ${updated.video_status || 'unknown'}`
      };
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ:', e);
      return { isReady: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ' };
    }
  };

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
        <span style={{ fontSize: '16px', fontWeight: 500 }}>
          {index + 1}. {lesson.lesson_title}
        </span>
        <Space size="small">
          <Button 
            type="primary"
            size="small" 
            icon={<ThunderboltOutlined />}
            loading={isGenerating}
            onClick={onGenerateContent}
            title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥—ã"
          />
          <LessonVideoGenerator 
            lesson={lesson} 
            courseId={courseId}
            moduleNumber={moduleNumber}
            lessonIndex={index}
            onVideoGenerated={loadVideoInfo}
            onVideoStatusChange={loadVideoInfo}
          />
          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ */}
          {(() => {
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if (videoInfo) {
              console.log('LessonItem videoInfo:', {
                video_status: videoInfo.video_status,
                video_download_url: videoInfo.video_download_url,
                video_id: videoInfo.video_id,
                hasUrl: !!videoInfo.video_download_url,
                urlLength: videoInfo.video_download_url?.length,
                fullVideoInfo: videoInfo
              });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –µ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ
            // –§–∞–∫—Ç–∏—á–µ—Å–∫—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å-—ç–Ω–¥–ø–æ–∏–Ω—Ç
            const showButtons = !!(videoInfo && videoInfo.video_id && String(videoInfo.video_id).trim() !== '');
            
            if (!showButtons && videoInfo) {
              console.log('–ö–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è, –ø—Ä–∏—á–∏–Ω–∞:', {
                hasVideoInfo: !!videoInfo,
                status: videoInfo.video_status,
                hasUrl: !!videoInfo.video_download_url,
                urlEmpty: !videoInfo.video_download_url || videoInfo.video_download_url.trim() === '',
                fullVideoInfo: videoInfo
              });
            }
            
            return showButtons ? (
              <>
                <Button 
                  size="small" 
                  icon={<PlayCircleOutlined />}
                  loading={openingVideo}
                  onClick={async (e) => {
                    console.log('–ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å" –Ω–∞–∂–∞—Ç–∞', { videoInfo, event: e });
                    setOpeningVideo(true);
                    try { message.loading({ content: '–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ...', key: 'open-video-inline', duration: 0 }); } catch (_) {}
                    try {
                      await handleWatchVideo();
                    } finally {
                      setOpeningVideo(false);
                      try { message.destroy('open-video-inline'); } catch (_) {}
                    }
                  }}
                  title={`–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ (${videoInfo.video_download_url})`}
                />
              </>
            ) : null;
          })()}
          <Button 
            size="small" 
            icon={<BookOutlined />}
            onClick={onViewContent}
            disabled={!hasDetailContent}
            title={hasDetailContent ? "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"}
          />
          <Dropdown menu={{ items: exportMenuItems }} disabled={!hasDetailContent}>
            <Button 
              size="small" 
              icon={<DownloadOutlined />}
              disabled={!hasDetailContent}
              title={hasDetailContent ? "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞" : "–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"}
            />
          </Dropdown>
          <Button 
            size="small" 
            icon={<EditOutlined />}
            onClick={onEdit}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"
          />
          <Dropdown
            trigger={["hover"]}
            menu={{
              items: [
                {
                  key: 'duplicate',
                  label: '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫',
                  onClick: () => onDuplicate && onDuplicate(index, lesson)
                },
                { type: 'divider' },
                {
                  key: 'delete',
                  label: '–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫',
                  danger: true,
                  onClick: () => onDelete && onDelete(index, lesson)
                }
              ]
            }}
          >
            <Button size="small" icon={<MoreOutlined />} title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" />
          </Dropdown>
        </Space>
      </div>
      
      <Space direction="vertical" style={{ width: '100%', paddingLeft: 20 }}>
        <div><strong>–¶–µ–ª—å:</strong> {lesson.lesson_goal}</div>
        <div>
          <Tag color="green">{lesson.format}</Tag>
          <Tag icon={<ClockCircleOutlined />}>
            {lesson.estimated_time_minutes} –º–∏–Ω
          </Tag>
        </div>
        <div>
          <strong>–ü–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong>
          <ul style={{ marginTop: 8, marginBottom: 0, marginLeft: 20, paddingLeft: 20 }}>
            {lesson.content_outline.map((item, i) => (
              <li key={i}>{item}</li>
            ))}
          </ul>
        </div>
        <div>
          <strong>–û—Ü–µ–Ω–∫–∞:</strong> {lesson.assessment}
        </div>
      </Space>
    </div>
  )
}

export default LessonItem

